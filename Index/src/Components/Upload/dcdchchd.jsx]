


// import React, { useState, useEffect, useRef } from 'react';
// import { Databases, Storage, Account, ID, Permission, Role, Query } from 'appwrite';
// import { FaUpload, FaSpinner, FaTimes, FaPalette, FaAward } from 'react-icons/fa';
// import { IoCloudUploadOutline } from 'react-icons/io5';
// import { motion, AnimatePresence } from 'framer-motion';
// import { toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';
// import { client } from '../../appwriteConfig';

// const artTypes = [
//   // Traditional & Fine Arts
//   "Oil Painting", "Acrylic Painting", "Watercolor Painting", "Ink", "Charcoal", "Pastel", "Pencil Drawing",
//   "Graphite Drawing", "Tempera", "Fresco Painting", "Mosaic Art", "Glass Art", "Fiber Art", "Sand Art",
//   // Digital & Modern Art
//   "Digital Art", "Digital Painting", "Vector Art", "Pixel Art", "3D Modeling", "Photography", "Mixed Media",
//   "Collage", "Printmaking", "AI-Generated Art", "Augmented Reality Art", "Virtual Reality Art", "NFT Art",
//   "Data Visualization Art",
//   // Calligraphy & Typography
//   "Calligraphy", "Typography Design",
//   // Sculpture & Installation
//   "Sculpture", "Ceramic", "Installation Art", "Kinetic Art", "Light Art",
//   // Performance & Experimental
//   "Performance Art", "Sound Art", "Bio Art",
//   // Photography
//   "Portrait Photography", "Landscape Photography", "Street Photography", "Conceptual Photography",
//   "Documentary Photography", "Micro Photography",
//   // Design & Applied Arts
//   "Graphic Design", "Industrial Design", "Fashion Design", "Interior Design", "Architectural Drawing",
//   "Game Design",
//   // Other
//   "Other",
// ];

// const tagOptions = [
//   'Abstract', 'Landscape', 'Portrait', 'StillLife', 'Fantasy', 'Realism', 'Surrealism', 'Traditional',
//   'Minimalism', 'Expressionism', 'Impressionism', 'PopArt', 'DigitalArt', 'Historical', 'Modern',
//   'Nature', 'Photography',
// ];

// const UploadEntry = ({ index, entry, updateEntry, removeEntry, handleFileChange, handleEntryUpload, uploading }) => {
//   const [isDragging, setIsDragging] = useState(false);
//   const dropAreaRef = useRef(null);
//   const fileInputRef = useRef(null);

//   const validateEntry = () => {
//     const errors = {};
//     if (!entry.title.trim()) errors.title = 'Title is required';
//     if (!entry.description.trim()) errors.description = 'Description is required';
//     if (!entry.medium) errors.medium = 'Art type is required';
//     if (!entry.tag) errors.tag = 'Category tag is required';
//     if (!entry.yearCreated || entry.yearCreated < 1900 || entry.yearCreated > new Date().getFullYear()) {
//       errors.yearCreated = `Year must be between 1900 and ${new Date().getFullYear()}`;
//     }
//     if (entry.isForSale && (!entry.price || entry.price <= 0)) {
//       errors.price = 'Price must be greater than 0';
//     }
//     if (!entry.file) errors.file = 'Please select an image';
//     return errors;
//   };

//   const errors = validateEntry();

//   const handleDragOver = (e) => {
//     e.preventDefault();
//     setIsDragging(true);
//     dropAreaRef.current.classList.add('border-blue-500');
//   };

//   const handleDragLeave = (e) => {
//     e.preventDefault();
//     setIsDragging(false);
//     dropAreaRef.current.classList.remove('border-blue-500');
//   };

//   const handleDrop = (e) => {
//     e.preventDefault();
//     setIsDragging(false);
//     dropAreaRef.current.classList.remove('border-blue-500');
//     handleFileChange(index, e.dataTransfer.files);
//   };

//   return (
//     <motion.div
//       className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700"
//       initial={{ opacity: 0, y: 20 }}
//       animate={{ opacity: 1, y: 0 }}
//       transition={{ delay: index * 0.1 }}
//     >
//       <div className="flex justify-between items-center mb-4">
//         <h3 className="text-xl font-bold text-gray-800 dark:text-white font-Playfair">
//           Artwork {index + 1}
//         </h3>
//         {index > 0 && (
//           <button
//             onClick={() => removeEntry(index)}
//             className="text-red-500 dark:text-red-400 hover:text-red-700 dark:hover:text-red-600 text-sm font-medium font-inter"
//           >
//             Remove
//           </button>
//         )}
//       </div>
//       <div className="space-y-4">
//         <div>
//           <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 font-inter mb-1">
//             Title <span className="text-red-500">*</span>
//           </label>
//           <input
//             type="text"
//             placeholder="Give your artwork a catchy name"
//             value={entry.title}
//             onChange={(e) => updateEntry(index, 'title', e.target.value)}
//             className={`w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border ${
//               errors.title ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
//             } rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter transition-colors`}
//           />
//           {errors.title && <p className="text-sm text-red-500 dark:text-red-400 mt-1">{errors.title}</p>}
//         </div>
//         <div>
//           <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 font-inter mb-1">
//             Description <span className="text-red-500">*</span>
//           </label>
//           <textarea
//             placeholder="Share the story or inspiration behind your artwork"
//             value={entry.description}
//             onChange={(e) => updateEntry(index, 'description', e.target.value)}
//             className={`w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border ${
//               errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
//             } rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter transition-colors`}
//             rows="3"
//           />
//           {errors.description && <p className="text-sm text-red-500 dark:text-red-400 mt-1">{errors.description}</p>}
//         </div>
//         <div>
//           <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 font-inter mb-1">
//             Category Tag <span className="text-red-500">*</span>
//           </label>
//           <select
//             value={entry.tag}
//             onChange={(e) => updateEntry(index, 'tag', e.target.value)}
//             className={`w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border ${
//               errors.tag ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
//             } rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter transition-colors`}
//           >
//             <option value="">Choose a Category Tag</option>
//             {tagOptions.map((tag) => (
//               <option key={tag} value={tag}>{tag}</option>
//             ))}
//           </select>
//           {errors.tag && <p className="text-sm text-red-500 dark:text-red-400 mt-1">{errors.tag}</p>}
//         </div>
//         <div>
//           <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 font-inter mb-1">
//             Art Type <span className="text-red-500">*</span>
//           </label>
//           <select
//             value={entry.medium}
//             onChange={(e) => updateEntry(index, 'medium', e.target.value)}
//             className={`w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border ${
//               errors.medium ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
//             } rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter transition-colors`}
//           >
//             <option value="">Choose Art Type</option>
//             {artTypes.map((type) => (
//               <option key={type} value={type}>{type}</option>
//             ))}
//           </select>
//           {errors.medium && <p className="text-sm text-red-500 dark:text-red-400 mt-1">{errors.medium}</p>}
//         </div>
//         <div>
//           <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 font-inter mb-1">
//             Year Created <span className="text-red-500">*</span>
//           </label>
//           <input
//             type="number"
//             min="1900"
//             max={new Date().getFullYear()}
//             value={entry.yearCreated}
//             onChange={(e) => updateEntry(index, 'yearCreated', parseInt(e.target.value))}
//             className={`w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border ${
//               errors.yearCreated ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
//             } rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter transition-colors`}
//           />
//           {errors.yearCreated && <p className="text-sm text-red-500 dark:text-red-400 mt-1">{errors.yearCreated}</p>}
//         </div>
//         <div>
//           <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 font-inter mb-1">
//             Dimensions (W × H)
//           </label>
//           <input
//             type="text"
//             placeholder="24 × 36 in"
//             value={entry.dimensions}
//             onChange={(e) => updateEntry(index, 'dimensions', e.target.value)}
//             className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter transition-colors"
//           />
//         </div>
//         <div>
//           <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 font-inter mb-1 flex items-center">
//             <FaAward className="mr-2 text-yellow-500" />
//             Awards & Recognitions (comma separated)
//           </label>
//           <input
//             type="text"
//             placeholder="Best in Show 2023, Gold Medal 2022"
//             value={entry.awards}
//             onChange={(e) => updateEntry(index, 'awards', e.target.value)}
//             className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter transition-colors"
//           />
//         </div>
//         <div className="flex items-center">
//           <input
//             type="checkbox"
//             id={`isForSale-${index}`}
//             checked={entry.isForSale}
//             onChange={(e) => updateEntry(index, 'isForSale', e.target.checked)}
//             className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
//           />
//           <label htmlFor={`isForSale-${index}`} className="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300 font-inter">
//             This artwork is for sale
//           </label>
//         </div>
//         <AnimatePresence>
//           {entry.isForSale && (
//             <motion.div
//               initial={{ opacity: 0, height: 0 }}
//               animate={{ opacity: 1, height: 'auto' }}
//               exit={{ opacity: 0, height: 0 }}
//               transition={{ duration: 0.3 }}
//             >
//               <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 font-inter mb-1">
//                 Price (USD) <span className="text-red-500">*</span>
//               </label>
//               <div className="relative">
//                 <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
//                   <span className="text-gray-500 dark:text-gray-400">$</span>
//                 </div>
//                 <input
//                   type="number"
//                   min="0"
//                   step="0.01"
//                   placeholder="2500.00"
//                   value={entry.price}
//                   onChange={(e) => updateEntry(index, 'price', e.target.value)}
//                   className={`w-full pl-8 pr-4 py-2 bg-gray-50 dark:bg-gray-700 border ${
//                     errors.price ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
//                   } rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter transition-colors`}
//                 />
//                 {errors.price && <p className="text-sm text-red-500 dark:text-red-400 mt-1">{errors.price}</p>}
//               </div>
//             </motion.div>
//           )}
//         </AnimatePresence>
//         <div
//           ref={dropAreaRef}
//           className={`border-2 border-dashed ${isDragging ? 'border-blue-500 bg-blue-50 dark:bg-blue-900' : 'border-gray-300 dark:border-gray-600'} rounded-2xl p-6 text-center cursor-pointer transition-all`}
//           onDragOver={handleDragOver}
//           onDragLeave={handleDragLeave}
//           onDrop={handleDrop}
//           onClick={() => fileInputRef.current.click()}
//         >
//           {entry.file ? (
//             <div className="flex flex-col items-center">
//               <img
//                 src={URL.createObjectURL(entry.file)}
//                 alt="Preview"
//                 className="h-32 object-contain mb-2 rounded-lg"
//               />
//               <p className="text-gray-700 dark:text-gray-300 font-medium truncate max-w-xs font-inter">
//                 {entry.file.name}
//               </p>
//               <p className="text-sm text-gray-500 dark:text-gray-400 mt-1 font-inter">
//                 {(entry.file.size / 1024 / 1024).toFixed(2)} MB
//               </p>
//             </div>
//           ) : (
//             <div className="flex flex-col items-center">
//               <FaUpload className="text-4xl text-gray-400 mb-3" />
//               <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                 <span className="font-semibold">Click to upload</span> or drag and drop
//               </p>
//               <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">JPG, PNG, WEBP (Max 10MB)</p>
//             </div>
//           )}
//           <input
//             type="file"
//             id={`fileInput-${index}`}
//             className="hidden"
//             accept="image/jpeg,image/png,image/webp"
//             onChange={(e) => handleFileChange(index, e.target.files)}
//             ref={fileInputRef}
//           />
//           {errors.file && <p className="text-sm text-red-500 dark:text-red-400 mt-1">{errors.file}</p>}
//         </div>
//         <motion.button
//           className={`w-full py-3 bg-blue-600 text-white rounded-lg font-inter font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center justify-center ${
//             uploading ? 'opacity-70 cursor-not-allowed' : ''
//           }`}
//           onClick={() => handleEntryUpload(index)}
//           disabled={uploading}
//           whileHover={{ scale: 1.05 }}
//           whileTap={{ scale: 0.95 }}
//         >
//           {uploading ? (
//             <>
//               <FaSpinner className="animate-spin mr-2" /> Uploading...
//             </>
//           ) : (
//             <>
//               <FaUpload className="mr-2" /> Share Artwork
//             </>
//           )}
//         </motion.button>
//       </div>
//     </motion.div>
//   );
// };

// const UploadSection = () => {
//   const [entries, setEntries] = useState([
//     {
//       title: '',
//       description: '',
//       tag: '',
//       medium: '',
//       yearCreated: new Date().getFullYear(),
//       dimensions: '',
//       awards: '',
//       price: '',
//       isForSale: false,
//       file: null,
//     },
//   ]);
//   const [uploadingStates, setUploadingStates] = useState({});
//   const [progress, setProgress] = useState(0);
//   const [recentImages, setRecentImages] = useState([]);
//   const [searchTag, setSearchTag] = useState('');
//   const [searchedImages, setSearchedImages] = useState([]);
//   const [editingImage, setEditingImage] = useState(null);
//   const [editForm, setEditForm] = useState({ title: '', description: '', tag: '', medium: '', yearCreated: '', dimensions: '', awards: '', price: '', isForSale: false });
//   const [user, setUser] = useState(null);
//   const [isInitialized, setIsInitialized] = useState(false);

//   const databases = new Databases(client);
//   const storage = new Storage(client);
//   const account = new Account(client);

//   useEffect(() => {
//     const initializeAppwrite = async () => {
//       try {
//         const currentUser = await account.get();
//         setUser(currentUser);

//         try {
//           await databases.listDocuments(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID);
//         } catch (err) {
//           if (err.code === 404) {
//             await databases.createCollection(
//               import.meta.env.VITE_APPWRITE_DATABASE_ID,
//               import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID,
//               'Artworks Collection',
//               [
//                 Permission.read(Role.any()),
//                 Permission.write(Role.users()),
//                 Permission.update(Role.users()),
//                 Permission.delete(Role.users()),
//               ]
//             );
//             await Promise.all([
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_METADATA_COLLECTION_ID, 'title', 255, true),
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_METADATA_COLLECTION_ID, 'description', 1000, true),
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'fileId', 255, true),
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_METADATA_COLLECTION_ID, 'imageUrl', 255, true),
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_METADATA_COLLECTION_ID, 'tag', 255, true),
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'medium', 255, true),
//               databases.createIntegerAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_METADATA_COLLECTION_ID, 'yearCreated', true),
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_METADATA_COLLECTION_ID, 'dimensions', 255, false),
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'awards', 1000, false),
//               databases.createFloatAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'price', false),
//               databases.createBooleanAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'isForSale', true),
//               databases.createBooleanAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'isAwardWinning', true),
//               databases.createStringAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'userId', 255, true),
//               databases.createDatetimeAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'uploadDate', true),
//               databases.createIntegerAttribute(import.meta.env.VITE_APPWRITE_DATABASE_ID, import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID, 'views', true),
//             ]);
//             await databases.createIndex(
//               import.meta.env.VITE_APPWRITE_DATABASE_ID,
//               import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID,
//               'tag_index',
//               'fulltext',
//               ['tag']
//             );
//           } else {
//             throw err;
//           }
//         }

//         const images = await getRecentImages();
//         setRecentImages(images);
//         setIsInitialized(true);
//       } catch (error) {
//         console.error('Error initializing Appwrite:', error);
//         toast.error('Failed to initialize database. Please check Appwrite setup.');
//       }
//     };
//     initializeAppwrite();
//   }, []);

//   const addEntry = () => {
//     setEntries([
//       ...entries,
//       {
//         title: '',
//         description: '',
//         tag: '',
//         medium: '',
//         yearCreated: new Date().getFullYear(),
//         dimensions: '',
//         awards: '',
//         price: '',
//         isForSale: false,
//         file: null,
//       },
//     ]);
//   };

//   const updateEntry = (index, field, value) => {
//     const newEntries = [...entries];
//     newEntries[index][field] = value;
//     setEntries(newEntries);
//   };

//   const removeEntry = (index) => {
//     setEntries(entries.filter((_, i) => i !== index));
//   };

//   const handleFileChange = (index, files) => {
//     if (!files || files.length === 0) return;
//     const file = files[0];
//     const maxSize = 10 * 1024 * 1024;
//     const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/x-png'];

//     if (!validTypes.includes(file.type)) {
//       toast.error('Please upload a valid image (JPEG, PNG, or WEBP)');
//       return;
//     }

//     if (file.size > maxSize) {
//       toast.error('File size exceeds 10MB limit');
//       return;
//     }

//     const newEntries = [...entries];
//     newEntries[index].file = file;
//     setEntries(newEntries);
//   };

//   const storeFileWithMetadata = async (file, userId, entryData) => {
//     try {
//       const storageResponse = await storage.createFile(
//         import.meta.env.VITE_APPWRITE_STORAGE_ID,
//         ID.unique(),
//         file,
//         [Permission.read(Role.any()), Permission.write(Role.user(userId))],
//         (progressEvent) => {
//           const percent = Math.round((progressEvent.loaded / progressEvent.total) * 100);
//           setProgress(percent);
//         }
//       );

//       const metadataResponse = await databases.createDocument(
//         import.meta.env.VITE_APPWRITE_DATABASE_ID,
//         import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID,
//         ID.unique(),
//         {
//           fileId: storageResponse.$id,
//           imageUrl: `${import.meta.env.VITE_APPWRITE_ENDPOINT}/storage/buckets/${import.meta.env.VITE_APPWRITE_STORAGE_ID}/files/${storageResponse.$id}/view?project=${import.meta.env.VITE_APPWRITE_PROJECT_ID}`,
//           userId,
//           title: entryData.title,
//           description: entryData.description,
//           tag: entryData.tag,
//           medium: entryData.medium,
//           yearCreated: parseInt(entryData.yearCreated),
//           dimensions: entryData.dimensions,
//           awards: entryData.awards ? entryData.awards.split(',').map(award => award.trim()).filter(award => award) : [],
//           price: entryData.isForSale ? parseFloat(entryData.price) || null : null,
//           isForSale: entryData.isForSale,
//           isAwardWinning: !!entryData.awards,
//           uploadDate: new Date().toISOString(),
//           views: 0,
//         },
//         [
//           Permission.read(Role.any()),
//           Permission.update(Role.user(userId)),
//           Permission.delete(Role.user(userId)),
//         ]
//       );

//       return { file: storageResponse, metadata: metadataResponse };
//     } catch (error) {
//       console.error('Error storing file and metadata:', error);
//       throw new Error(`Upload failed: ${error.message}`);
//     }
//   };

//   const handleEntryUpload = async (index) => {
//     if (!isInitialized) {
//       toast.error('Database is not initialized. Please try again later.');
//       return;
//     }

//     const entry = entries[index];
//     const errors = Object.values({
//       title: !entry.title.trim() ? 'Title is required' : '',
//       description: !entry.description.trim() ? 'Description is required' : '',
//       tag: !entry.tag ? 'Category tag is required' : '',
//       medium: !entry.medium ? 'Art type is required' : '',
//       yearCreated: !entry.yearCreated || entry.yearCreated < 1900 || entry.yearCreated > new Date().getFullYear()
//         ? `Year must be between 1900 and ${new Date().getFullYear()}`
//         : '',
//       price: entry.isForSale && (!entry.price || entry.price <= 0) ? 'Price must be greater than 0' : '',
//       file: !entry.file ? 'Please select an image' : '',
//     }).filter(Boolean);

//     if (errors.length) {
//       toast.error(errors[0]);
//       return;
//     }

//     setUploadingStates((prev) => ({ ...prev, [index]: true }));
//     setProgress(0);

//     try {
//       if (!user || !user.$id) {
//         throw new Error('Please log in to upload artwork');
//       }

//       await storeFileWithMetadata(entry.file, user.$id, entry);
//       setProgress(100);

//       const newEntries = [...entries];
//       newEntries[index] = {
//         title: '',
//         description: '',
//         tag: '',
//         medium: '',
//         yearCreated: new Date().getFullYear(),
//         dimensions: '',
//         awards: '',
//         price: '',
//         isForSale: false,
//         file: null,
//       };
//       setEntries(newEntries);

//       const images = await getRecentImages();
//       setRecentImages(images);

//       toast.success(
//         <div>
//           <p className="font-semibold">"{entry.title}" uploaded successfully!</p>
//           <p className="text-sm">Your artwork is now live.</p>
//         </div>,
//         { autoClose: 5000 }
//       );
//     } catch (err) {
//       toast.error(err.message || 'Upload failed. Please try again.');
//     } finally {
//       setUploadingStates((prev) => ({ ...prev, [index]: false }));
//       setProgress(0);
//     }
//   };

//   const getRecentImages = async () => {
//     try {
//       const response = await databases.listDocuments(
//         import.meta.env.VITE_APPWRITE_DATABASE_ID,
//         import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID,
//         [
//           Query.orderDesc('uploadDate'),
//           Query.limit(10),
//           Query.select(['title', 'description', 'fileId', 'imageUrl', 'uploadDate', 'tag', 'medium', 'yearCreated', 'dimensions', 'awards', 'price', 'isForSale', 'isAwardWinning', 'userId']),
//         ]
//       );
//       return response.documents;
//     } catch (error) {
//       console.error('Error fetching documents:', error);
//       toast.error('Failed to fetch recent images.');
//       return [];
//     }
//   };

//   const searchImagesByTag = async (tag) => {
//     try {
//       const response = await databases.listDocuments(
//         import.meta.env.VITE_APPWRITE_DATABASE_ID,
//         import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID,
//         [
//           Query.search('tag', tag),
//           Query.select(['title', 'description', 'fileId', 'imageUrl', 'uploadDate', 'tag', 'medium', 'yearCreated', 'dimensions', 'awards', 'price', 'isForSale', 'isAwardWinning', 'userId']),
//         ]
//       );
//       return response.documents;
//     } catch (error) {
//       console.error('Error searching documents:', error);
//       toast.error('Failed to search images.');
//       return [];
//     }
//   };

//   const updateImageMetadata = async (documentId, updates) => {
//     try {
//       const response = await databases.updateDocument(
//         import.meta.env.VITE_APPWRITE_DATABASE_ID,
//         import.meta.env.VITE_APPWRITE_ARTWORKS_COLLECTION_ID,
//         documentId,
//         {
//           ...updates,
//           awards: updates.awards ? updates.awards.split(',').map(award => award.trim()).filter(award => award) : [],
//           price: updates.isForSale ? parseFloat(updates.price) || null : null,
//           isAwardWinning: !!updates.awards,
//           uploadDate: new Date().toISOString(),
//         }
//       );
//       return response;
//     } catch (error) {
//       console.error('Error updating document:', error);
//       throw new Error(`Update failed: ${error.message}`);
//     }
//   };

//   const handleSearch = async () => {
//     if (!isInitialized) {
//       toast.error('Database is not initialized. Please try again later.');
//       return;
//     }

//     if (!searchTag.trim()) {
//       toast.error('Please enter a tag to search');
//       return;
//     }
//     const images = await searchImagesByTag(searchTag);
//     setSearchedImages(images);
//   };

//   const startEditing = (image) => {
//     if (!isInitialized) {
//       toast.error('Database is not initialized. Please try again later.');
//       return;
//     }

//     if (!user || user.$id !== image.userId) {
//       toast.error('You can only edit your own images');
//       return;
//     }
//     setEditingImage(image.$id);
//     setEditForm({
//       title: image.title,
//       description: image.description,
//       tag: image.tag,
//       medium: image.medium,
//       yearCreated: image.yearCreated,
//       dimensions: image.dimensions,
//       awards: image.awards.join(', '),
//       price: image.price || '',
//       isForSale: image.isForSale,
//     });
//   };

//   const handleEditChange = (field, value) => {
//     setEditForm((prev) => ({ ...prev, [field]: value }));
//   };

//   const handleUpdate = async (documentId) => {
//     if (!isInitialized) {
//       toast.error('Database is not initialized. Please try again later.');
//       return;
//     }

//     const errors = Object.values({
//       title: !editForm.title.trim() ? 'Title is required' : '',
//       description: !editForm.description.trim() ? 'Description is required' : '',
//       tag: !editForm.tag ? 'Category tag is required' : '',
//       medium: !editForm.medium ? 'Art type is required' : '',
//       yearCreated: !editForm.yearCreated || editForm.yearCreated < 1900 || editForm.yearCreated > new Date().getFullYear()
//         ? `Year must be between 1900 and ${new Date().getFullYear()}`
//         : '',
//       price: editForm.isForSale && (!editForm.price || editForm.price <= 0) ? 'Price must be greater than 0' : '',
//     }).filter(Boolean);

//     if (errors.length) {
//       toast.error(errors[0]);
//       return;
//     }

//     try {
//       if (!user || !user.$id) {
//         throw new Error('Please log in to update metadata');
//       }

//       await updateImageMetadata(documentId, editForm);
//       const images = await getRecentImages();
//       setRecentImages(images);
//       setSearchedImages((prev) =>
//         prev.map((img) => (img.$id === documentId ? { ...img, ...editForm, awards: editForm.awards.split(',').map(award => award.trim()).filter(award => award), price: editForm.isForSale ? parseFloat(editForm.price) || null : null, isAwardWinning: !!editForm.awards } : img))
//       );
//       setEditingImage(null);
//       toast.success('Metadata updated successfully!');
//     } catch (error) {
//       toast.error(error.message || 'Failed to update metadata');
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 transition-colors duration-300 py-12 px-4 sm:px-6 lg:px-8">
//       <div className="max-w-5xl mx-auto">
//         <motion.div
//           initial={{ opacity: 0, y: 20 }}
//           animate={{ opacity: 1, y: 0 }}
//           transition={{ duration: 0.5 }}
//         >
//           <h2 className="text-3xl font-bold text-gray-800 dark:text-white mb-2 font-Playfair">
//             Share Your Artwork
//           </h2>
//           <p className="text-gray-600 dark:text-gray-300 mb-8 font-inter">
//             Upload your creative masterpieces to the community gallery
//           </p>
//         </motion.div>

//         {entries.map((entry, index) => (
//           <motion.div
//             key={index}
//             className="mb-8"
//             initial={{ opacity: 0, y: 20 }}
//             animate={{ opacity: 1, y: 0 }}
//             transition={{ delay: index * 0.2 }}
//           >
//             <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 p-6">
//               <div className="h-80 bg-gray-100 dark:bg-gray-700 rounded-2xl flex items-center justify-center overflow-hidden">
//                 {entry.file ? (
//                   <img
//                     src={URL.createObjectURL(entry.file)}
//                     alt="Preview"
//                     className="max-h-full max-w-full object-contain rounded-2xl"
//                   />
//                 ) : (
//                   <div className="text-center">
//                     <IoCloudUploadOutline className="mx-auto h-16 w-16 text-gray-400 dark:text-gray-500 mb-4" />
//                     <p className="text-gray-500 dark:text-gray-400 text-xl font-medium font-Playfair">Image Preview</p>
//                     <p className="text-gray-400 dark:text-gray-500 text-sm mt-2 font-inter">Your uploaded image will appear here</p>
//                   </div>
//                 )}
//               </div>
//               <UploadEntry
//                 index={index}
//                 entry={entry}
//                 updateEntry={updateEntry}
//                 removeEntry={removeEntry}
//                 handleFileChange={handleFileChange}
//                 handleEntryUpload={handleEntryUpload}
//                 uploading={uploadingStates[index] || false}
//               />
//             </div>
//             <motion.div
//               className="mt-6 bg-gray-50 dark:bg-gray-700 rounded-2xl p-6 shadow-sm border border-gray-200 dark:border-gray-600"
//               initial={{ opacity: 0 }}
//               animate={{ opacity: 1 }}
//               transition={{ delay: 0.3 }}
//             >
//               <h3 className="text-lg font-semibold text-gray-800 dark:text-white font-Playfair mb-4">Preview</h3>
//               <div className="flex flex-col md:flex-row gap-6">
//                 {entry.file && (
//                   <div className="w-full md:w-1/3">
//                     <img
//                       src={URL.createObjectURL(entry.file)}
//                       alt="Artwork Preview"
//                       className="w-full h-48 object-contain rounded-lg border border-gray-200 dark:border-gray-600"
//                     />
//                   </div>
//                 )}
//                 <div className="flex-1">
//                   <h4 className="text-xl font-bold text-gray-800 dark:text-white font-Playfair">
//                     {entry.title || 'Untitled Artwork'}
//                   </h4>
//                   <p className="text-sm text-gray-600 dark:text-gray-300 font-inter mt-1">
//                     {entry.description || 'No description provided'}
//                   </p>
//                   <div className="mt-2 text-sm text-gray-600 dark:text-gray-300 font-inter">
//                     <p><span className="font-medium">Medium:</span> {entry.medium || 'Not specified'}</p>
//                     <p><span className="font-medium">Tag:</span> {entry.tag || 'Not specified'}</p>
//                     <p><span className="font-medium">Year:</span> {entry.yearCreated || 'Not specified'}</p>
//                     <p><span className="font-medium">Dimensions:</span> {entry.dimensions || 'Not specified'}</p>
//                     {entry.awards && (
//                       <p>
//                         <span className="font-medium">Awards:</span>{' '}
//                         {entry.awards.split(',').map(award => award.trim()).filter(award => award).join(', ') || 'None'}
//                       </p>
//                     )}
//                     {entry.isForSale && (
//                       <p>
//                         <span className="font-medium">Price:</span>{' '}
//                         {entry.price ? `$${parseFloat(entry.price).toFixed(2)}` : 'Not specified'}
//                       </p>
//                     )}
//                   </div>
//                 </div>
//               </div>
//             </motion.div>
//           </motion.div>
//         ))}
//         <motion.button
//           className="w-full max-w-5xl py-3 bg-blue-600 text-white rounded-lg font-inter font-medium hover:bg-blue-700 transition-colors mt-4"
//           onClick={addEntry}
//           whileHover={{ scale: 1.05 }}
//           whileTap={{ scale: 0.95 }}
//         >
//           Add Another Artwork
//         </motion.button>

//         {Object.values(uploadingStates).some((state) => state) && (
//           <motion.div
//             className="w-full max-w-5xl mt-6"
//             initial={{ opacity: 0 }}
//             animate={{ opacity: 1 }}
//             transition={{ duration: 0.3 }}
//           >
//             <div className="flex justify-between mb-1">
//               <span className="text-sm font-medium text-gray-700 dark:text-gray-300 font-inter">Upload Progress</span>
//               <span className="text-sm font-medium text-gray-500 dark:text-gray-400 font-inter">{progress}%</span>
//             </div>
//             <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 overflow-hidden">
//               <motion.div
//                 className="bg-blue-600 h-2.5 rounded-full"
//                 initial={{ width: 0 }}
//                 animate={{ width: `${progress}%` }}
//                 transition={{ duration: 0.5 }}
//               />
//             </div>
//           </motion.div>
//         )}

//         <motion.div
//           className="w-full max-w-5xl mt-12"
//           initial={{ opacity: 0, y: 20 }}
//           animate={{ opacity: 1, y: 0 }}
//           transition={{ duration: 0.5 }}
//         >
//           <h2 className="text-3xl font-bold text-gray-800 dark:text-white mb-4 font-Playfair">Search Artwork</h2>
//           <div className="flex gap-4">
//             <input
//               type="text"
//               placeholder="Search by tag (e.g., Landscape)"
//               value={searchTag}
//               onChange={(e) => setSearchTag(e.target.value)}
//               className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//               disabled={!isInitialized}
//             />
//             <motion.button
//               className="px-6 py-2 bg-blue-600 text-white rounded-lg font-inter font-medium hover:bg-blue-700 transition-colors disabled:opacity-50"
//               onClick={handleSearch}
//               disabled={!isInitialized}
//               whileHover={{ scale: 1.05 }}
//               whileTap={{ scale: 0.95 }}
//             >
//               Search
//             </motion.button>
//           </div>
//           <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
//             {searchedImages.length > 0 ? (
//               searchedImages.map((image) => (
//                 <motion.div
//                   key={image.$id}
//                   className="bg-white dark:bg-gray-800 p-4 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700"
//                   initial={{ opacity: 0, scale: 0.95 }}
//                   animate={{ opacity: 1, scale: 1 }}
//                   transition={{ duration: 0.3 }}
//                 >
//                   {editingImage === image.$id ? (
//                     <div className="space-y-4">
//                       <input
//                         type="text"
//                         value={editForm.title}
//                         onChange={(e) => handleEditChange('title', e.target.value)}
//                         placeholder="Title"
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       />
//                       <textarea
//                         value={editForm.description}
//                         onChange={(e) => handleEditChange('description', e.target.value)}
//                         placeholder="Description"
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                         rows="3"
//                       />
//                       <select
//                         value={editForm.tag}
//                         onChange={(e) => handleEditChange('tag', e.target.value)}
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       >
//                         <option value="">Choose a Category Tag</option>
//                         {tagOptions.map((tag) => (
//                           <option key={tag} value={tag}>{tag}</option>
//                         ))}
//                       </select>
//                       <select
//                         value={editForm.medium}
//                         onChange={(e) => handleEditChange('medium', e.target.value)}
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       >
//                         <option value="">Choose Art Type</option>
//                         {artTypes.map((type) => (
//                           <option key={type} value={type}>{type}</option>
//                         ))}
//                       </select>
//                       <input
//                         type="number"
//                         min="1900"
//                         max={new Date().getFullYear()}
//                         value={editForm.yearCreated}
//                         onChange={(e) => handleEditChange('yearCreated', parseInt(e.target.value))}
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                         placeholder="Year Created"
//                       />
//                       <input
//                         type="text"
//                         value={editForm.dimensions}
//                         onChange={(e) => handleEditChange('dimensions', e.target.value)}
//                         placeholder="Dimensions (W × H)"
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       />
//                       <input
//                         type="text"
//                         value={editForm.awards}
//                         onChange={(e) => handleEditChange('awards', e.target.value)}
//                         placeholder="Awards (comma separated)"
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       />
//                       <div className="flex items-center">
//                         <input
//                           type="checkbox"
//                           id={`edit-isForSale-${image.$id}`}
//                           checked={editForm.isForSale}
//                           onChange={(e) => handleEditChange('isForSale', e.target.checked)}
//                           className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
//                         />
//                         <label htmlFor={`edit-isForSale-${image.$id}`} className="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300 font-inter">
//                           This artwork is for sale
//                         </label>
//                       </div>
//                       <AnimatePresence>
//                         {editForm.isForSale && (
//                           <motion.div
//                             initial={{ opacity: 0, height: 0 }}
//                             animate={{ opacity: 1, height: 'auto' }}
//                             exit={{ opacity: 0, height: 0 }}
//                             transition={{ duration: 0.3 }}
//                           >
//                             <div className="relative">
//                               <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
//                                 <span className="text-gray-500 dark:text-gray-400">$</span>
//                               </div>
//                               <input
//                                 type="number"
//                                 min="0"
//                                 step="0.01"
//                                 value={editForm.price}
//                                 onChange={(e) => handleEditChange('price', e.target.value)}
//                                 className="w-full pl-8 pr-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                                 placeholder="2500.00"
//                               />
//                             </div>
//                           </motion.div>
//                         )}
//                       </AnimatePresence>
//                       <div className="flex gap-2">
//                         <motion.button
//                           className="w-full py-2 bg-blue-600 text-white rounded-lg font-inter font-medium hover:bg-blue-700 transition-colors"
//                           onClick={() => handleUpdate(image.$id)}
//                           whileHover={{ scale: 1.05 }}
//                           whileTap={{ scale: 0.95 }}
//                         >
//                           Save
//                         </motion.button>
//                         <motion.button
//                           className="w-full py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-white rounded-lg font-inter font-medium hover:bg-gray-400 dark:hover:bg-gray-700 transition-colors"
//                           onClick={() => setEditingImage(null)}
//                           whileHover={{ scale: 1.05 }}
//                           whileTap={{ scale: 0.95 }}
//                         >
//                           Cancel
//                         </motion.button>
//                       </div>
//                     </div>
//                   ) : (
//                     <>
//                       <img
//                         src={image.imageUrl}
//                         alt={image.title}
//                         className="w-full h-48 object-cover rounded-lg mb-4"
//                       />
//                       <h3 className="text-lg font-bold text-gray-800 dark:text-white font-Playfair">
//                         {image.title}
//                       </h3>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">{image.description}</p>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Medium: {image.medium}
//                       </p>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Tag: {image.tag || 'Not specified'}
//                       </p>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Year: {image.yearCreated || 'Not specified'}
//                       </p>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Dimensions: {image.dimensions || 'Not specified'}
//                       </p>
//                       {image.awards.length > 0 && (
//                         <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                           Awards: {image.awards.join(', ') || 'None'}
//                         </p>
//                       )}
//                       {image.isForSale && (
//                         <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                           Price: {image.price ? `$${image.price.toFixed(2)}` : 'Not specified'}
//                         </p>
//                       )}
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Uploaded: {new Date(image.uploadDate).toLocaleDateString()}
//                       </p>
//                       {user && user.$id === image.userId && (
//                         <motion.button
//                           className="mt-2 py-2 bg-blue-600 text-white rounded-lg font-inter font-medium hover:bg-blue-700 transition-colors w-full"
//                           onClick={() => startEditing(image)}
//                           disabled={!isInitialized}
//                           whileHover={{ scale: 1.05 }}
//                           whileTap={{ scale: 0.95 }}
//                         >
//                           Edit
//                         </motion.button>
//                       )}
//                     </>
//                   )}
//                 </motion.div>
//               ))
//             ) : (
//               <p className="text-gray-600 dark:text-gray-300 col-span-full font-inter">
//                 {searchTag ? `No images found for tag "${searchTag}".` : 'Enter a tag to search.'}
//               </p>
//             )}
//           </div>
//         </motion.div>

//         <motion.div
//           className="w-full max-w-5xl mt-12"
//           initial={{ opacity: 0, y: 20 }}
//           animate={{ opacity: 1, y: 0 }}
//           transition={{ duration: 0.5 }}
//         >
//           <h2 className="text-3xl font-bold text-gray-800 dark:text-white mb-4 font-Playfair">Recent Artwork</h2>
//           <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
//             {recentImages.length > 0 ? (
//               recentImages.map((image) => (
//                 <motion.div
//                   key={image.$id}
//                   className="bg-white dark:bg-gray-800 p-4 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700"
//                   initial={{ opacity: 0, scale: 0.95 }}
//                   animate={{ opacity: 1, scale: 1 }}
//                   transition={{ duration: 0.3 }}
//                 >
//                   {editingImage === image.$id ? (
//                     <div className="space-y-4">
//                       <input
//                         type="text"
//                         value={editForm.title}
//                         onChange={(e) => handleEditChange('title', e.target.value)}
//                         placeholder="Title"
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       />
//                       <textarea
//                         value={editForm.description}
//                         onChange={(e) => handleEditChange('description', e.target.value)}
//                         placeholder="Description"
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                         rows="3"
//                       />
//                       <select
//                         value={editForm.tag}
//                         onChange={(e) => handleEditChange('tag', e.target.value)}
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       >
//                         <option value="">Choose a Category Tag</option>
//                         {tagOptions.map((tag) => (
//                           <option key={tag} value={tag}>{tag}</option>
//                         ))}
//                       </select>
//                       <select
//                         value={editForm.medium}
//                         onChange={(e) => handleEditChange('medium', e.target.value)}
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       >
//                         <option value="">Choose Art Type</option>
//                         {artTypes.map((type) => (
//                           <option key={type} value={type}>{type}</option>
//                         ))}
//                       </select>
//                       <input
//                         type="number"
//                         min="1900"
//                         max={new Date().getFullYear()}
//                         value={editForm.yearCreated}
//                         onChange={(e) => handleEditChange('yearCreated', parseInt(e.target.value))}
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                         placeholder="Year Created"
//                       />
//                       <input
//                         type="text"
//                         value={editForm.dimensions}
//                         onChange={(e) => handleEditChange('dimensions', e.target.value)}
//                         placeholder="Dimensions (W × H)"
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       />
//                       <input
//                         type="text"
//                         value={editForm.awards}
//                         onChange={(e) => handleEditChange('awards', e.target.value)}
//                         placeholder="Awards (comma separated)"
//                         className="w-full px-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                       />
//                       <div className="flex items-center">
//                         <input
//                           type="checkbox"
//                           id={`edit-isForSale-${image.$id}`}
//                           checked={editForm.isForSale}
//                           onChange={(e) => handleEditChange('isForSale', e.target.checked)}
//                           className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
//                         />
//                         <label htmlFor={`edit-isForSale-${image.$id}`} className="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300 font-inter">
//                           This artwork is for sale
//                         </label>
//                       </div>
//                       <AnimatePresence>
//                         {editForm.isForSale && (
//                           <motion.div
//                             initial={{ opacity: 0, height: 0 }}
//                             animate={{ opacity: 1, height: 'auto' }}
//                             exit={{ opacity: 0, height: 0 }}
//                             transition={{ duration: 0.3 }}
//                           >
//                             <div className="relative">
//                               <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
//                                 <span className="text-gray-500 dark:text-gray-400">$</span>
//                               </div>
//                               <input
//                                 type="number"
//                                 min="0"
//                                 step="0.01"
//                                 value={editForm.price}
//                                 onChange={(e) => handleEditChange('price', e.target.value)}
//                                 className="w-full pl-8 pr-4 py-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent text-gray-900 dark:text-white font-inter"
//                                 placeholder="2500.00"
//                               />
//                             </div>
//                           </motion.div>
//                         )}
//                       </AnimatePresence>
//                       <div className="flex gap-2">
//                         <motion.button
//                           className="w-full py-2 bg-blue-600 text-white rounded-lg font-inter font-medium hover:bg-blue-700 transition-colors"
//                           onClick={() => handleUpdate(image.$id)}
//                           whileHover={{ scale: 1.05 }}
//                           whileTap={{ scale: 0.95 }}
//                         >
//                           Save
//                         </motion.button>
//                         <motion.button
//                           className="w-full py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-white rounded-lg font-inter font-medium hover:bg-gray-400 dark:hover:bg-gray-700 transition-colors"
//                           onClick={() => setEditingImage(null)}
//                           whileHover={{ scale: 1.05 }}
//                           whileTap={{ scale: 0.95 }}
//                         >
//                           Cancel
//                         </motion.button>
//                       </div>
//                     </div>
//                   ) : (
//                     <>
//                       <img
//                         src={image.imageUrl}
//                         alt={image.title}
//                         className="w-full h-48 object-cover rounded-lg mb-4"
//                       />
//                       <h3 className="text-lg font-bold text-gray-800 dark:text-white font-Playfair">
//                         {image.title}
//                       </h3>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">{image.description}</p>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Medium: {image.medium}
//                       </p>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Tag: {image.tag || 'Not specified'}
//                       </p>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Year: {image.yearCreated || 'Not specified'}
//                       </p>
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Dimensions: {image.dimensions || 'Not specified'}
//                       </p>
//                       {image.awards.length > 0 && (
//                         <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                           Awards: {image.awards.join(', ') || 'None'}
//                         </p>
//                       )}
//                       {image.isForSale && (
//                         <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                           Price: {image.price ? `$${image.price.toFixed(2)}` : 'Not specified'}
//                         </p>
//                       )}
//                       <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
//                         Uploaded: {new Date(image.uploadDate).toLocaleDateString()}
//                       </p>
//                       {user && user.$id === image.userId && (
//                         <motion.button
//                           className="mt-2 py-2 bg-blue-600 text-white rounded-lg font-inter font-medium hover:bg-blue-700 transition-colors w-full"
//                           onClick={() => startEditing(image)}
//                           disabled={!isInitialized}
//                           whileHover={{ scale: 1.05 }}
//                           whileTap={{ scale: 0.95 }}
//                         >
//                           Edit
//                         </motion.button>
//                       )}
//                     </>
//                   )}
//                 </motion.div>
//               ))
//             ) : (
//               <p className="text-gray-600 dark:text-gray-300 col-span-full font-inter">No recent images found.</p>
//             )}
//           </div>
//         </motion.div>
//       </div>
//     </div>
//   );
// };

// export default UploadSection;